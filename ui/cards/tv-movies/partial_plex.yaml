---
type: vertical-stack
cards:
  - type: custom:bubble-card
    card_type: separator
    name: Plex
    icon: mdi:plex
    styles: |-
      .bubble-line {
        background: var(--ha-card-background);
        opacity: 1;
        }
  - square: false
    columns: 1
    type: grid
    cards:
      - entity: sensor.plexstats_tvshowcount
        name: TV Shows
        type: custom:mushroom-entity-card
        primary_info: state
        secondary_info: name
        tap_action:
          action: none
        hold_action:
          action: none
        double_tap_action:
          action: none
      - entity: sensor.plexstats_tvseasoncount
        name: TV Seasons
        type: custom:mushroom-entity-card
        primary_info: state
        secondary_info: name
        tap_action:
          action: none
        hold_action:
          action: none
        double_tap_action:
          action: none
      - entity: sensor.plexstats_tvepisodecount
        name: TV Episodes
        type: custom:mushroom-entity-card
        primary_info: state
        secondary_info: name
        tap_action:
          action: none
        hold_action:
          action: none
        double_tap_action:
          action: none
      - entity: sensor.plexstats_moviecount
        name: Movies
        type: custom:mushroom-entity-card
        primary_info: state
        secondary_info: name
        tap_action:
          action: none
        hold_action:
          action: none
        double_tap_action:
          action: none

  - square: false
    columns: 2
    type: grid
    cards:
      - entity: sensor.plex_thecube2
        type: custom:mushroom-entity-card
        primary_info: state
        secondary_info: name
        tap_action:
          action: none
        hold_action:
          action: none
        double_tap_action:
          action: none
      - entity: sensor.plex_installed_version
        type: custom:mushroom-entity-card
        primary_info: state
        secondary_info: name
        tap_action:
          action: none
        hold_action:
          action: none
        double_tap_action:
          action: none
      - entity: sensor.plex_latest_version
        type: custom:mushroom-entity-card
        primary_info: state
        secondary_info: name
        tap_action:
          action: none
        hold_action:
          action: none
        double_tap_action:
          action: none
      - entity: sensor.top_movie
        type: custom:mushroom-entity-card
        primary_info: state
        secondary_info: name
        tap_action:
          action: none
        hold_action:
          action: none
        double_tap_action:
          action: none
      - entity: sensor.top_tv_show
        type: custom:mushroom-entity-card
        primary_info: state
        secondary_info: name
        tap_action:
          action: none
        hold_action:
          action: none
        double_tap_action:
          action: none
      - entity: sensor.top_user
        type: custom:mushroom-entity-card
        primary_info: state
        secondary_info: name
        tap_action:
          action: none
        hold_action:
          action: none
        double_tap_action:
          action: none
      - entity: sensor.direct_plays
        type: custom:mushroom-entity-card
        primary_info: state
        secondary_info: name
        tap_action:
          action: none
        hold_action:
          action: none
        double_tap_action:
          action: none
      - entity: sensor.direct_streams
        type: custom:mushroom-entity-card
        primary_info: state
        secondary_info: name
        tap_action:
          action: none
        hold_action:
          action: none
        double_tap_action:
          action: none
      - entity: sensor.lan_bandwidth
        type: custom:mushroom-entity-card
        primary_info: state
        secondary_info: name
        tap_action:
          action: none
        hold_action:
          action: none
        double_tap_action:
          action: none
      - entity: sensor.total_bandwidth
        type: custom:mushroom-entity-card
        primary_info: state
        secondary_info: name
        tap_action:
          action: none
        hold_action:
          action: none
        double_tap_action:
          action: none
      - entity: sensor.transcodes
        type: custom:mushroom-entity-card
        primary_info: state
        secondary_info: name
        tap_action:
          action: none
        hold_action:
          action: none
        double_tap_action:
          action: none
      - entity: sensor.wan_bandwidth
        type: custom:mushroom-entity-card
        primary_info: state
        secondary_info: name
        tap_action:
          action: none
        hold_action:
          action: none
        double_tap_action:
          action: none

  - type: custom:auto-entities
    filter:
      exclude:
        - state: unknown
        - state: unavailable
        - state: "off"
      include:
        - entity_id: "*plex*session*"
          options:
            entity: this.entity_id
            type: custom:button-card
            variables:
              entity: this.entity_id
            custom_fields:
              picture:
                card:
                  type: picture
                  image: |
                    [[[
                      if (states[variables.entity].attributes.grandparent_thumb != ''){
                        return "https://tautulli.stratotally.com/api/v2?apikey=3210aea1a55943c7b51fbd821884a0c9&cmd=pms_image_proxy&img=" + states[variables.entity].attributes.grandparent_thumb + "&amp;width=300&amp;height=450&amp;fallback=poster&amp;refresh=true";
                      } else {
                        if (states[variables.entity].attributes.thumb != ''){
                          return "https://tautulli.stratotally.com/api/v2?apikey=3210aea1a55943c7b51fbd821884a0c9&cmd=pms_image_proxy&img=" + states[variables.entity].attributes.thumb + "&amp;width=300&amp;height=450&amp;fallback=poster&amp;refresh=true"
                        } else {
                          return states['sensor.' + states[variables.entity].attributes.user + '_session_thumbnail'].state
                        }
                      }
                    ]]]
                  style: |
                    ha-card {
                      box-shadow: 0;
                      border-radius: 0;
                      margin: 5px 0 0 -5px;
                    }
                    ha-card img {
                      min-height: 100px;
                      min-width: 100px;
                    }
              bar:
                card:
                  type: custom:bar-card
                  entities:
                    - entity: this.entity_id
                  attribute: progress_percent
                  unit_of_measurement: "%"
                  positions:
                    icon: "off"
                    indicator: "off"
                    name: inside
                  height: 19px
                  color: "#e49f29"
                  name: |
                    [[[
                      return states[variables.entity].state
                    ]]]
                  style: |-
                    ha-card {
                      --ha-card-background: none;
                      border: none;
                      box-shadow: none;
                    }
                    ha-card #states {
                      padding: 0;
                    }
                    bar-card-currentbar, bar-card-backgroundbar {
                      border-radius: 5px;
                      left: 0;
                    }
                    bar-card-name {
                      margin-left: 3%;
                      text-shadow: 1px 1px 1px #0003;
                    }
                    bar-card-value {
                      margin-right: 3%;
                      text-shadow: 1px 1px 1px #0003;
                    }
              user: |
                [[[
                  return "<b>" + states[variables.entity].attributes.user + "</b>"
                ]]]
              title: |
                [[[
                  if (states[variables.entity].state == 'playing') {
                    return "<ha-icon icon='mdi:play' style='width: 15px; height: 15px; position: relative; top: -2px;'></ha-icon> " + states[variables.entity].attributes.full_title;
                  } else {
                    if (states[variables.entity].state == 'paused') {
                      return "<ha-icon icon='mdi:pause' style='width: 15px; height: 15px; position: relative; top: -2px;'></ha-icon> " + states[variables.entity].attributes.full_title;
                    } else {
                      return states[variables.entity].attributes.full_title;
                    }
                  }

                ]]]
              stream_label: <b>Stream</b>
              stream: |
                [[[
                  return states[variables.entity].attributes.video_resolution + " > " + states[variables.entity].attributes.transcode_decision + " > " +states[variables.entity].attributes.stream_video_resolution + ""
                ]]]
              product_label: <b>Product</b>
              product: |
                [[[
                  return states[variables.entity].attributes.product
                ]]]
              player_label: <b>Player</b>
              player: |
                [[[
                  return states[variables.entity].attributes.player
                ]]]
              location_label: <b>Location</b>
              location: |
                [[[
                  return states[variables.entity].attributes.location + ": " + states[variables.entity].attributes.ip_address
                ]]]
              media_detail: |
                [[[
                  if(states[variables.entity].attributes.media_type == 'movie') {
                    return "<ha-icon icon='mdi:filmstrip' style='width: 15px; height: 15px; position: relative; top: -2px;'></ha-icon> (" + states[variables.entity].attributes.year + ")";
                  } else {
                    return "<ha-icon icon='mdi:television-classic' style='width: 15px; height: 15px; position: relative; top: -2px;'></ha-icon> S" + states[variables.entity].attributes.parent_media_index + " • E" + states[variables.entity].attributes.media_index;
                  }
                ]]]
              bandwidth_label: <b>Bandwidth</b>
              bandwidth: |
                [[[
                  var bytes = states[variables.entity].attributes.bandwidth * 1000;
                  var sizes = ['Bytes', 'Kbps', 'Mbps', 'Gbps', 'Tbps'];
                  if (bytes == 0) return 'n/a';
                  var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1000)));
                  if (i == 0) return bytes + ' ' + sizes[i];
                  return (bytes / Math.pow(1000, i)).toFixed(1) + ' ' + sizes[i];
                ]]]
            style: |
              ha-card {
                box-shadow: 0;
                padding: 0;
                margin: 0;
                border: 0;
              }
              ha-card #container {
              margin: 5px 0 0 0;
              }
              #name {
                display:none;
              }
            styles:
              card:
                - height: 100x
                - padding: 0
              custom_fields:
                bar:
                  - text-transform: capitalize
                  - font-size: 13px
                user:
                  - text-align: end
                  - font-size: 15px
                title:
                  - text-align: start
                  - font-size: 13px
                stream:
                  - text-transform: capitalize
                  - text-align: start
                  - font-size: 13px
                product:
                  - text-transform: capitalize
                  - text-align: start
                  - font-size: 13px
                player:
                  - text-transform: capitalize
                  - text-align: start
                  - font-size: 13px
                location:
                  - text-transform: uppercase
                  - text-align: start
                  - font-size: 13px
                media_detail:
                  - text-transform: uppercase
                  - text-align: start
                  - font-size: 13px
                bandwidth:
                  - text-transform: capitalize
                  - text-align: start
                  - font-size: 13px
                product_label:
                  - text-transform: uppercase
                  - text-align: end
                  - font-size: 10px
                player_label:
                  - text-transform: uppercase
                  - text-align: end
                  - font-size: 10px
                stream_label:
                  - text-transform: uppercase
                  - text-align: end
                  - font-size: 10px
                location_label:
                  - text-transform: uppercase
                  - text-align: end
                  - font-size: 10px
                bandwidth_label:
                  - text-transform: uppercase
                  - text-align: end
                  - font-size: 10px
              grid:
                - grid-template-areas: |
                    "picture product_label product"
                    "picture player_label player"
                    "picture stream_label stream"
                    "picture location_label location"
                    "picture bandwidth_label bandwidth"
                    "picture bar bar"
                    "picture title title"
                    "picture media_detail user"
                - grid-template-columns: 1fr 60px 3fr
                - grid-gap: 5px 10px
    card:
      type: vertical-stack
    card_param: cards

  - type: vertical-stack
    cards:
      - type: entities
        card_mod: null
        style:
          fold-entity-row$: |
            ha-icon {
              color: rgb(var(--rgb-disabled-color));
              margin-right: 24px;
            }
          hui-section-row $: |
            .divider { display: none; }
          .: |
            .card-content {
              padding: 0;
            }
        entities:
          - type: custom:fold-entity-row
            head:
              type: custom:mushroom-legacy-template-card
              primary: Plex Top Users
              secondary: >
                {{state_attr('sensor.plex_tautulli_topusers', 'rows')[0].friendly_name }}
              icon: mdi:plex
              icon_color: orange
              card_mod:
                style: |
                  ha-card {
                    background: none;
                    border: 0;
                    box-shadow: none;
                  }
            padding: 0
            entities:
              - type: custom:hui-element
                card_type: custom:flex-table-card
                entities:
                  include: sensor.plex_tautulli_topusers
                css:
                  table+: "border-collapse: collapse; padding: 0px;"
                  span: "font-size: smaller"
                strict: true
                columns:
                  - name: User
                    data: rows
                    modify: x.friendly_name
                  - name: Total Plays
                    data: rows
                    modify: x.total_plays
                    align: center
                  - name: Watch Length
                    data: rows
                    align: center
                    modify: |-
                      {
                        var uptime = Number(x.total_duration);
                        var minutes = Math.floor((uptime % 3600) / 60);
                        var hours = Math.floor(((uptime) / 3600));
                        hours.toString().padStart(2, '0') + ":" + minutes.toString().padStart(2, '0')
                      }
                  - name: Last Play
                    data: rows
                    modify: |-
                      {
                        var date = new Date(x.last_play*1000);
                        String(date.getDate()).padStart(2,'0')+"/"+
                        (String(date.getMonth()+ 1).padStart(2,'0')) + "/" + date.getFullYear()
                      }
                card_mod:
                  style: |
                    ha-card {
                      overflow: auto;
                      padding-left: 20px;
                      padding-right: 20px;
                      padding-bottom: 20px
                    }
                    tbody tr:hover {
                      background-color: coral !important
                    }

      - type: entities
        card_mod: null
        style:
          fold-entity-row$: |
            ha-icon {
              color: rgb(var(--rgb-disabled-color));
              margin-right: 24px;
            }
          hui-section-row $: |
            .divider { display: none; }
          .: |
            .card-content {
              padding: 0;
            }
        entities:
          - type: custom:fold-entity-row
            head:
              type: custom:mushroom-legacy-template-card
              primary: Plex Watch Summary
              secondary: >
                {{state_attr('sensor.plex_tautulli_history', 'data')[0].full_title }}
              icon: mdi:plex
              icon_color: orange
              card_mod:
                style: |
                  ha-card {
                    background: none;
                    border: 0;
                    box-shadow: none;
                  }
            padding: 0
            entities:
              - type: custom:hui-element
                card_type: custom:flex-table-card
                entities:
                  include: sensor.plex_tautulli_history
                css:
                  table+: "border-collapse: collapse; padding: 0px;"
                  span: "font-size: smaller"
                strict: true
                columns:
                  - name: "What?"
                    data: data
                    modify: x.full_title
                  - name: "Who?"
                    data: data
                    modify: x.user
                  - name: "When?"
                    data: data
                    modify: |-
                      {
                        var date = new Date(x.date*1000);
                        String(date.getDate()).padStart(2,'0')+"/"+
                        (String(date.getMonth()+ 1).padStart(2,'0')) + "/" + date.getFullYear()
                      }
                card_mod:
                  style: |
                    ha-card {
                      overflow: auto;
                      padding-left: 20px;
                      padding-right: 20px;
                      padding-bottom: 20px
                    }
                    tbody tr:hover {
                      background-color: coral !important
                    }

      - type: entities
        card_mod: null
        style:
          fold-entity-row$: |
            ha-icon {
              color: rgb(var(--rgb-disabled-color));
              margin-right: 24px;
            }
          hui-section-row $: |
            .divider { display: none; }
          .: |
            .card-content {
              padding: 0;
            }
        entities:
          - type: custom:fold-entity-row
            head:
              type: custom:mushroom-legacy-template-card
              primary: Plex Watch Stats - TV
              icon: mdi:plex
              icon_color: orange
              card_mod:
                style: |
                  ha-card {
                    background: none;
                    border: 0;
                    box-shadow: none;
                  }
            padding: 0
            entities:
              - type: custom:hui-element
                card_type: custom:flex-table-card
                entities:
                  include: sensor.plex_tautulli_watch_stats_tv
                css:
                  table+: "border-collapse: collapse; padding: 0px;"
                  span: "font-size: smaller"
                strict: true
                columns:
                  - name: "#"
                    data: data
                    modify: x.query_days + "D"
                    align: center
                  - name: Plays
                    data: data
                    modify: x.total_plays
                    align: center
                  - name: Duration
                    data: data
                    align: center
                    modify: |-
                      {
                        var uptime = Number(x.total_time);
                        var minutes = Math.floor((uptime % 3600) / 60);
                        var hours = Math.floor(((uptime) / 3600));
                        hours.toString().padStart(2, '0') + ":" + minutes.toString().padStart(2, '0')
                      }
                  - name: Average
                    data: data
                    align: center
                    modify: |-
                      {
                        var time = Number(x.total_time);
                        var playcnt = Number(x.total_plays);
                        var uptime = time / playcnt;
                        var minutes = Math.floor((uptime % 3600) / 60);
                        var hours = Math.floor(((uptime) / 3600));
                        if (playcnt == 0) {
                          "00:00"
                        } else {
                          hours.toString().padStart(2, '0') + ":" + minutes.toString().padStart(2, '0')
                        }
                      }
                card_mod:
                  style: |
                    ha-card {
                      overflow: auto;
                      padding-left: 20px;
                      padding-right: 20px;
                      padding-bottom: 20px
                    }
                    tbody tr:hover {
                      background-color: coral !important
                    }

      - type: entities
        card_mod: null
        style:
          fold-entity-row$: |
            ha-icon {
              color: rgb(var(--rgb-disabled-color));
              margin-right: 24px;
            }
          hui-section-row $: |
            .divider { display: none; }
          .: |
            .card-content {
              padding: 0;
            }
        entities:
          - type: custom:fold-entity-row
            head:
              type: custom:mushroom-legacy-template-card
              primary: Plex Watch Stats - Movies
              icon: mdi:plex
              icon_color: orange
              card_mod:
                style: |
                  ha-card {
                    background: none;
                    border: 0;
                    box-shadow: none;
                  }
            padding: 0
            entities:
              - type: custom:hui-element
                card_type: custom:flex-table-card
                entities:
                  include: sensor.plex_tautulli_watch_stats_movies
                css:
                  table+: "border-collapse: collapse; padding: 0px;"
                  span: "font-size: smaller"
                strict: true
                columns:
                  - name: "#"
                    data: data
                    modify: x.query_days + "D"
                    align: center
                  - name: Plays
                    data: data
                    modify: x.total_plays
                    align: center
                  - name: Duration
                    data: data
                    align: center
                    modify: |-
                      {
                        var uptime = Number(x.total_time);
                        var minutes = Math.floor((uptime % 3600) / 60);
                        var hours = Math.floor(((uptime) / 3600));
                        hours.toString().padStart(2, '0') + ":" + minutes.toString().padStart(2, '0')
                      }
                  - name: Average
                    data: data
                    align: center
                    modify: |-
                      {
                        var time = Number(x.total_time);
                        var playcnt = Number(x.total_plays);
                        var uptime = time / playcnt;
                        var minutes = Math.floor((uptime % 3600) / 60);
                        var hours = Math.floor(((uptime) / 3600));
                        if (playcnt == 0) {
                          "00:00"
                        } else {
                          hours.toString().padStart(2, '0') + ":" + minutes.toString().padStart(2, '0')
                        }
                      }
                card_mod:
                  style: |
                    ha-card {
                      overflow: auto;
                      padding-left: 20px;
                      padding-right: 20px;
                      padding-bottom: 20px
                    }
                    tbody tr:hover {
                      background-color: coral !important
                    }

      - type: entities
        card_mod:
          style:
            fold-entity-row$: |
              ha-icon {
                color: rgb(var(--rgb-disabled-color));
                margin-right: 24px;
              }
            hui-section-row $: |
              .divider { display: none; }
            .: |
              .card-content {
                padding: 0;
              }
        entities:
          - type: custom:fold-entity-row
            head:
              type: custom:mushroom-legacy-template-card
              primary: Plex Recently Added - TV Shows
              secondary: >
                {{state_attr('sensor.plex_recently_added', 'data')[1].title }}
              icon: mdi:plex
              icon_color: orange
              card_mod:
                style: |
                  ha-card {
                    background: none;
                    border: 0;
                    box-shadow: none;
                  }
            padding: 0
            entities:
              - type: custom:hui-element
                card_type: custom:flex-table-card
                entities:
                  include: sensor.plex_recently_added
                css:
                  table+: "border-collapse: collapse; padding: 0px;"
                  tbody tr td:nth-child(1): "width: 20%;"
                  span: "font-size: smaller"
                strict: true
                columns:
                  - name: test
                    data: data
                    modify: x.title
                    hidden: true
                  - name: Date
                    data: data
                    modify: |-
                      {
                        var date = new Date(x.airdate);
                        String(date.getDate()).padStart(2,'0')+"/"+
                        (String(date.getMonth()+ 1).padStart(2,'0')) + "/" + date.getFullYear()
                      }
                  - name: Detail
                    data: data
                    modify: '{ x.title + "<br/><span>" + x.number + ", " + x.episode + "</span>" }'
                card_mod:
                  style: |
                    ha-card {
                      overflow: auto;
                      padding-left: 20px;
                      padding-right: 20px;
                      padding-bottom: 20px
                    }
                    tbody tr:hover {
                      background-color: coral !important
                    }

      - type: entities
        card_mod:
          style:
            fold-entity-row$: |
              ha-icon {
                color: rgb(var(--rgb-disabled-color));
                margin-right: 24px;
              }
            hui-section-row $: |
              .divider { display: none; }
            .: |
              .card-content {
                padding: 0;
              }
        entities:
          - type: custom:fold-entity-row
            head:
              type: custom:mushroom-legacy-template-card
              primary: Plex Recently Added - Movies
              secondary: >
                {{state_attr('sensor.plex_recently_added_movie', 'data')[1].title }}
              icon: mdi:plex
              icon_color: orange
              card_mod:
                style: |
                  ha-card {
                    background: none;
                    border: 0;
                    box-shadow: none;
                  }
            padding: 0
            entities:
              - type: custom:hui-element
                card_type: custom:flex-table-card
                entities:
                  include: sensor.plex_recently_added_movie
                css:
                  table+: "border-collapse: collapse; padding: 0px;"
                  tbody tr td:nth-child(1): "width: 25%;"
                  span: "font-size: smaller"
                strict: true
                columns:
                  - name: test
                    data: data
                    modify: x.title
                    hidden: true
                  - name: Date
                    data: data
                    modify: |-
                      {
                        var date = new Date(x.airdate);
                        String(date.getDate()).padStart(2,'0')+"/"+
                        (String(date.getMonth()+ 1).padStart(2,'0')) + "/" + date.getFullYear()
                      }
                  - name: Detail
                    data: data
                    modify: x.title
                card_mod:
                  style: |
                    ha-card {
                      overflow: auto;
                      padding-left: 20px;
                      padding-right: 20px;
                      padding-bottom: 20px
                    }
                    tbody tr:hover {
                      background-color: coral !important
                    }

      - type: entities
        card_mod:
          style:
            fold-entity-row$: |
              ha-icon {
                color: rgb(var(--rgb-disabled-color));
                margin-right: 24px;
              }
            hui-section-row $: |
              .divider { display: none; }
            .: |
              .card-content {
                padding: 0;
              }
        entities:
          - type: custom:fold-entity-row
            head:
              type: custom:mushroom-legacy-template-card
              primary: Plex Top TV - Last 30 Days
              secondary: >
                {{state_attr('sensor.plex_tautulli_toptv_30days', 'rows')[0].title }}
              icon: mdi:plex
              icon_color: orange
              card_mod:
                style: |
                  ha-card {
                    background: none;
                    border: 0;
                    box-shadow: none;
                  }
            padding: 0
            entities:
              - type: custom:hui-element
                card_type: custom:flex-table-card
                entities:
                  include: sensor.plex_tautulli_toptv_30days
                css:
                  table+: "border-collapse: collapse; padding: 0px;"
                  span: "font-size: smaller"
                strict: true
                columns:
                  - name: Detail
                    data: rows
                    modify: x.title
                  - name: Plays
                    data: rows
                    align: center
                    modify: x.total_plays
                  - name: Length
                    data: rows
                    align: center
                    modify: |-
                      {
                        var uptime = Number(x.total_duration);
                        var minutes = Math.floor((uptime % 3600) / 60);
                        var hours = Math.floor(((uptime) / 3600));
                        hours.toString().padStart(2, '0') + ":" + minutes.toString().padStart(2, '0')
                      }
                  - name: Date
                    data: rows
                    modify: |-
                      {
                        var date = new Date(x.last_play*1000);
                        String(date.getDate()).padStart(2,'0')+"/"+
                        (String(date.getMonth()+ 1).padStart(2,'0'))+"/"+date.getFullYear()
                      }
                card_mod:
                  style: |
                    ha-card {
                      overflow: auto;
                      padding-left: 20px;
                      padding-right: 20px;
                      padding-bottom: 20px
                    }
                    tbody tr:hover {
                      background-color: coral !important
                    }

      - type: entities
        card_mod:
          style:
            fold-entity-row$: |
              ha-icon {
                color: rgb(var(--rgb-disabled-color));
                margin-right: 24px;
              }
            hui-section-row $: |
              .divider { display: none; }
            .: |
              .card-content {
                padding: 0;
              }
        entities:
          - type: custom:fold-entity-row
            head:
              type: custom:mushroom-legacy-template-card
              primary: Plex Top TV - By Duration
              secondary: >
                {{state_attr('sensor.plex_tautulli_toptv', 'rows')[0].title }}
              icon: mdi:plex
              icon_color: orange
              card_mod:
                style: |
                  ha-card {
                    background: none;
                    border: 0;
                    box-shadow: none;
                  }
            padding: 0
            entities:
              - type: custom:hui-element
                card_type: custom:flex-table-card
                entities:
                  include: sensor.plex_tautulli_toptv
                css:
                  table+: "border-collapse: collapse; padding: 0px;"
                  span: "font-size: smaller"
                strict: true
                columns:
                  - name: Detail
                    data: rows
                    modify: x.title
                  - name: Plays
                    data: rows
                    align: center
                    modify: x.total_plays
                  - name: Length
                    data: rows
                    align: center
                    modify: |-
                      {
                        var uptime = Number(x.total_duration);
                        var minutes = Math.floor((uptime % 3600) / 60);
                        var hours = Math.floor(((uptime) / 3600));
                        hours.toString().padStart(2, '0') + ":" + minutes.toString().padStart(2, '0')
                      }
                  - name: Date
                    data: rows
                    modify: |-
                      {
                        var date = new Date(x.last_play*1000);
                        String(date.getDate()).padStart(2,'0')+"/"+
                        (String(date.getMonth()+ 1).padStart(2,'0'))+"/"+date.getFullYear()
                      }
                card_mod:
                  style: |
                    ha-card {
                      overflow: auto;
                      padding-left: 20px;
                      padding-right: 20px;
                      padding-bottom: 20px
                    }
                    tbody tr:hover {
                      background-color: coral !important
                    }

      - type: entities
        card_mod:
          style:
            fold-entity-row$: |
              ha-icon {
                color: rgb(var(--rgb-disabled-color));
                margin-right: 24px;
              }
            hui-section-row $: |
              .divider { display: none; }
            .: |
              .card-content {
                padding: 0;
              }
        entities:
          - type: custom:fold-entity-row
            head:
              type: custom:mushroom-legacy-template-card
              primary: Plex Top TV - By Eps Watched
              secondary: >
                {{state_attr('sensor.plex_tautulli_toptv_plays', 'rows')[0].title }}
              icon: mdi:plex
              icon_color: orange
              card_mod:
                style: |
                  ha-card {
                    background: none;
                    border: 0;
                    box-shadow: none;
                  }
            padding: 0
            entities:
              - type: custom:hui-element
                card_type: custom:flex-table-card
                entities:
                  include: sensor.plex_tautulli_toptv_plays
                css:
                  table+: "border-collapse: collapse; padding: 0px;"
                  span: "font-size: smaller"
                strict: true
                columns:
                  - name: Detail
                    data: rows
                    modify: x.title
                  - name: Plays
                    data: rows
                    align: center
                    modify: x.total_plays
                  - name: Length
                    data: rows
                    align: center
                    modify: |-
                      {
                        var uptime = Number(x.total_duration);
                        var minutes = Math.floor((uptime % 3600) / 60);
                        var hours = Math.floor(((uptime) / 3600));
                        hours.toString().padStart(2, '0') + ":" + minutes.toString().padStart(2, '0')
                      }
                  - name: Date
                    data: rows
                    modify: |-
                      {
                        var date = new Date(x.last_play*1000);
                        String(date.getDate()).padStart(2,'0')+"/"+
                        (String(date.getMonth()+ 1).padStart(2,'0'))+"/"+date.getFullYear()
                      }
                card_mod:
                  style: |
                    ha-card {
                      overflow: auto;
                      padding-left: 20px;
                      padding-right: 20px;
                      padding-bottom: 20px
                    }
                    tbody tr:hover {
                      background-color: coral !important
                    }

      - type: entities
        card_mod:
          style:
            fold-entity-row$: |
              ha-icon {
                color: rgb(var(--rgb-disabled-color));
                margin-right: 24px;
              }
            hui-section-row $: |
              .divider { display: none; }
            .: |
              .card-content {
                padding: 0;
              }
        entities:
          - type: custom:fold-entity-row
            head:
              type: custom:mushroom-legacy-template-card
              primary: Plex Top Movies
              secondary: >
                {{state_attr('sensor.plex_tautulli_topmovies', 'rows')[0].title }}
              icon: mdi:plex
              icon_color: orange
              card_mod:
                style: |
                  ha-card {
                    background: none;
                    border: 0;
                    box-shadow: none;
                  }
            padding: 0
            entities:
              - type: custom:hui-element
                card_type: custom:flex-table-card
                entities:
                  include: sensor.plex_tautulli_topmovies
                css:
                  table+: "border-collapse: collapse; padding: 0px;"
                  span: "font-size: smaller"
                strict: true
                columns:
                  - name: Detail
                    data: rows
                    modify: x.title
                  - name: Plays
                    data: rows
                    align: center
                    modify: x.total_plays
                  - name: Length
                    data: rows
                    align: center
                    modify: |-
                      {
                        var uptime = Number(x.total_duration);
                        var minutes = Math.floor((uptime % 3600) / 60);
                        var hours = Math.floor(((uptime) / 3600));
                        hours.toString().padStart(2, '0') + ":" + minutes.toString().padStart(2, '0')
                      }
                  - name: Date
                    data: rows
                    modify: |-
                      {
                        var date = new Date(x.last_play*1000);
                        String(date.getDate()).padStart(2,'0')+"/"+
                        (String(date.getMonth()+ 1).padStart(2,'0'))+"/"+date.getFullYear()
                      }
                card_mod:
                  style: |
                    ha-card {
                      overflow: auto;
                      padding-left: 20px;
                      padding-right: 20px;
                      padding-bottom: 20px
                    }
                    tbody tr:hover {
                      background-color: coral !important
                    }
