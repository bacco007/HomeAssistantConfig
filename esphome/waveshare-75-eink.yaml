substitutions:
  esp_name: "waveshare_75_eink"
  ip_address: 192.168.1.105
  ip_gw: 192.168.1.1
  ip_netmask: 255.255.255.0

esphome:
  name: ${esp_name}
  comment: ${esp_name}
  includes:
    - common.h
  on_boot:
    priority: 200.0
    then:
      - component.update: eink_display
      - wait_until:
          condition:
            lambda: "return id(data_updated) == true;"
            # Wait a bit longer so all the items are received
      - delay: 5s
      - logger.log: "Initial sensor data received: Refreshing display..."
      - lambda: "id(initial_data_received) = true;"
      - script.execute: update_screen

esp32:
  board: esp32dev
  framework:
    type: arduino

# external_components:
#   - source:
#       type: git
#       url: https://github.com/atomicmike/esphome.git
#       ref: waveshare-color-2022.6
#     components: [waveshare_epaper]

# external_components:
#   # twisterss fork of esphome-dev
#   - source:
#       type: git
#       url: https://github.com/twisterss/esphome-dev.git
#       ref: waveshare-red-black
#     components: [waveshare_epaper]

# external_components:
#   - source: my_components_waveshare75

logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  - platform: esphome  # Your existing OTA method
  - platform: web_server  # Add this for web-based OTA uploads

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: ${ip_address}
    gateway: ${ip_gw}
    subnet: ${ip_netmask}
  ap:
    ssid: ${esp_name} Fallback"
    password: !secret ap_password

# mqtt:
#   broker: !secret mqtt_host
#   username: !secret mqtt_user
#   password: !secret mqtt_password
#   discovery: true
#   discovery_retain: true
#   discovery_unique_id_generator: mac
#   discovery_object_id_generator: device_name
#   birth_message:
#     topic: esp/wavesharedisplay
#     payload: online
#   will_message:
#     topic: esp/wavesharedisplay
#     payload: offline
#   shutdown_message:
#     topic: esp/wavesharedisplay
#     payload: offline
#   on_message:
#     - topic: esp/displayupdate
#       payload: 'ON'
#       then:
#       - component.update: eink_display

captive_portal:

web_server:
  port: 80
  include_internal: true

globals:
  - id: data_updated
    type: bool
    restore_value: no
    initial_value: "false"
  - id: initial_data_received
    type: bool
    restore_value: no
    initial_value: "false"
  - id: recorded_display_refresh
    type: int
    restore_value: yes
    initial_value: "0"

script:
  - id: update_screen
    then:
      - lambda: "id(data_updated) = false;"
      - component.update: eink_display
      - lambda: "id(recorded_display_refresh) += 1;"
      - lambda: "id(display_last_update).publish_state(id(ntp).now().timestamp);"

select:
  - platform: template
    name: "${esp_name} Appearance"
    id: appearance
    options:
      - "Dark Mode"
      - "Light Mode"
    initial_option: "Light Mode"
    restore_value: true
    optimistic: true
    entity_category: config

time:
  - platform: homeassistant
    id: ntp
    on_time_sync:
      - then:
          - component.update: sunrise
          - component.update: sunset
          - logger.log: Time has been set and is valid!
    on_time:
      - seconds: 0
        minutes: /5
        then:
          - if:
              condition:
                lambda: "return id(data_updated) == true;"
              then:
                - lambda: "id(initial_data_received) = true;"
                - logger.log: "Sensor data updated: Refreshing display..."
                - component.update: eink_display
                - lambda: "id(data_updated) = false;"
                - lambda: "id(recorded_display_refresh) += 1;"
                - lambda: "id(display_last_update).publish_state(id(ntp).now().timestamp);"
              else:
                - logger.log: "No sensors updated - skipping display refresh."

sun:
  latitude: !secret home_latitude
  longitude: !secret home_longitude

button:
  - platform: shutdown
    name: "${esp_name} Shutdown"
  - platform: restart
    name: "${esp_name} Restart"
  - platform: template
    name: "${esp_name} Refresh"
    icon: "mdi:update"
    entity_category: config
    on_press:
      - script.execute: update_screen

switch:
  - platform: gpio
    id: statusLED
    name: "${esp_name} Status LED"
    pin:
      number: GPIO2
      mode: OUTPUT
    restore_mode: ALWAYS_OFF

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${esp_name} IP Address"
      id: ip_address
      icon: "mdi:server-network"
      entity_category: diagnostic
    ssid:
      name: "${esp_name} Connected SSID"
      id: ssid
      icon: mdi:wifi-strength-2
      entity_category: diagnostic
    bssid:
      name: "${esp_name} Connected BSSID"
      id: bssid
      icon: mdi:wifi-strength-2
      entity_category: diagnostic
    mac_address:
      name: "${esp_name} WiFi Mac Address"
      id: macaddress
      icon: mdi:wifi-strength-2
      entity_category: diagnostic
    scan_results:
      name: "${esp_name} Latest Scan Results"
      id: wifiscanresults
      icon: mdi:wifi
      entity_category: diagnostic

  - platform: template
    name: "${esp_name} Uptime"
    id: uptime_human
    icon: mdi:clock-start

  - platform: version
    name: "${esp_name} ESPHome Version"
    entity_category: diagnostic
    hide_timestamp: true

  - platform: sun
    id: sunrise
    name: Sun Next Sunrise
    type: sunrise
    format: "%H:%M"
    internal: true
    update_interval: never

  - platform: sun
    id: sunset
    name: Sun Next Sunset
    type: sunset
    format: "%H:%M"
    internal: true
    update_interval: never

  - platform: homeassistant
    entity_id: sun.sun
    id: hasun
    internal: true
  - platform: homeassistant
    entity_id: sensor.moon
    id: moon
    internal: true

  # media
  - platform: homeassistant
    entity_id: sensor.e_ink_display_data
    attribute: media_playing_status
    id: media_status
    on_value:
      then:
        - lambda: "id(data_updated) = true;"
  - platform: homeassistant
    entity_id: sensor.e_ink_display_data
    attribute: media_playing_title
    id: media_title
    on_value:
      then:
        - lambda: "id(data_updated) = true;"
  - platform: homeassistant
    entity_id: sensor.e_ink_display_data
    attribute: media_playing_artist
    id: media_artist

  - platform: homeassistant
    id: condition
    entity_id: sensor.e_ink_display_data
    attribute: current_weather_condition
    on_value:
      then:
        - lambda: "id(data_updated) = true;"

  - platform: homeassistant
    entity_id: sensor.e_ink_display_data
    attribute: forecast_day1
    id: forecast1
  - platform: homeassistant
    entity_id: sensor.e_ink_display_data
    attribute: forecast_day2
    id: forecast2
  - platform: homeassistant
    entity_id: sensor.e_ink_display_data
    attribute: forecast_day3
    id: forecast3
  - platform: homeassistant
    entity_id: sensor.e_ink_display_data
    attribute: forecast_day4
    id: forecast4
  - platform: homeassistant
    entity_id: sensor.e_ink_display_data
    attribute: forecast_day5
    id: forecast5
  - platform: homeassistant
    entity_id: sensor.e_ink_display_data
    attribute: forecast_day6
    id: forecast6
  - platform: homeassistant
    entity_id: sensor.e_ink_display_data
    attribute: greeting
    id: greeting
    on_value:
      then:
        - lambda: "id(data_updated) = true;"
  # Moon phase
  - platform: homeassistant
    entity_id: sensor.moon
    id: moon_phase
  - platform: homeassistant
    entity_id: sensor.moon_rise
    id: moon_rise
  - platform: homeassistant
    entity_id: sensor.moon_set
    id: moon_set

sensor:
  - platform: template
    name: "${esp_name} Display Last Update"
    device_class: timestamp
    entity_category: "diagnostic"
    id: display_last_update

  - platform: template
    name: "${esp_name} Recorded Display Refresh"
    lambda: "return id(recorded_display_refresh);"
    accuracy_decimals: 0
    unit_of_measurement: "Refreshes"
    state_class: "total_increasing"
    entity_category: "diagnostic"

  - platform: wifi_signal
    id: sensor_wifi_signal
    name: "${esp_name} WiFi"
    entity_category: "diagnostic"
    unit_of_measurement: "dBm"
    update_interval: 60s
    on_value:
      - component.update: sensor_wifi_signal_percentage

  - platform: template
    id: sensor_wifi_signal_percentage
    name: "${esp_name} Wi-Fi Signal Percentage"
    icon: "mdi:wifi"
    unit_of_measurement: "%"
    update_interval: never
    lambda: |-
      if (id(sensor_wifi_signal).state) {
        if (id(sensor_wifi_signal).state <= -100 ) {
          return 0;
        } else if (id(sensor_wifi_signal).state >= -50) {
          return 100;
        } else {
          return 2 * (id(sensor_wifi_signal).state + 100);
        }
      } else {
        return NAN;
      }

  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

  ## Data from Home Assistant
  - platform: homeassistant
    id: temperature
    entity_id: sensor.e_ink_display_data
    attribute: home_temperature
    on_value:
      then:
        - lambda: "id(data_updated) = true;"

  - platform: homeassistant
    id: max_temp
    entity_id: sensor.e_ink_display_data
    attribute: home_temperature_max

  - platform: homeassistant
    id: min_temp
    entity_id: sensor.e_ink_display_data
    attribute: home_temperature_min

  - platform: homeassistant
    id: rainfall
    entity_id: sensor.e_ink_display_data
    attribute: home_rainfall_today
    on_value:
      then:
        - lambda: "id(data_updated) = true;"

  - platform: homeassistant
    id: rainfall_week
    entity_id: sensor.e_ink_display_data
    attribute: home_rainfall_week

  - platform: homeassistant
    id: rainfall_month
    entity_id: sensor.e_ink_display_data
    attribute: home_rainfall_month

  - platform: homeassistant
    id: rainfall_year
    entity_id: sensor.e_ink_display_data
    attribute: home_rainfall_year

font:
  - file:
      type: gfonts
      family: Red Hat Display
      weight: 700
    id: din_big
    size: 30
    glyphs: "'!%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ íëabcdefghijklmnopqrstuvwxyz&/"
  - file:
      type: gfonts
      family: Red Hat Display
      weight: 900
    id: din_med
    size: 20
    glyphs: "'!%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ íëabcdefghijklmnopqrstuvwxyz&/"
  - file:
      type: gfonts
      family: Red Hat Display
      weight: 700
    id: text_20
    size: 20
    glyphs: "'!%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ íëabcdefghijklmnopqrstuvwxyz&/"
  - file:
      type: gfonts
      family: Red Hat Display
      weight: 700
    id: text_forecast
    size: 20
    glyphs: "'!%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ íëabcdefghijklmnopqrstuvwxyz&/"
  - file:
      type: gfonts
      family: Red Hat Display
      weight: 700
    id: text_current_temp
    size: 35
    glyphs: "'!%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ íëabcdefghijklmnopqrstuvwxyz&/"
  - file:
      type: gfonts
      family: Red Hat Display
      weight: 700
    id: text_25_bold
    size: 15
    glyphs: "'!%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ íëabcdefghijklmnopqrstuvwxyz&/"
  - file:
      type: gfonts
      family: Red Hat Display
      weight: 800
    id: text_footer
    size: 20
    glyphs: "'!%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ íëabcdefghijklmnopqrstuvwxyz&/"
  - file:
      type: gfonts
      family: Red Hat Display
      weight: 700
    id: din_small_bold
    size: 5
    glyphs: "'!%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ íëabcdefghijklmnopqrstuvwxyz&/"

  # https://pictogrammers.github.io/@mdi/font/5.3.45/
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: font_icons_large
    size: 75
    glyphs:
      - "\U000F0594" # clear-night
      - "\U000F0590" # cloudy
      - "\U000F0591" # fog
      - "\U000F0592" # hail
      - "\U000F0593" # lightning
      - "\U000F067E" # lightning-rainy
      - "\U000F0F31" # night-partly-cloudy
      - "\U000F0595" # partly-cloudy
      - "\U000F0596" # pouring
      - "\U000F0597" # rainy
      - "\U000F0F36" # snowy
      - "\U000F067F" # snowy-rainy
      - "\U000F0599" # sunny
      - "\U000F059D" # windy
      - "\U000F059E" # windy-variant
      - "\U000F0F38" # exCentereptional
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: font_icons
    size: 40
    glyphs:
      - "\U000F0384" # MusicBox
      - "\U000F0502" # TVbox
      - "\U000F0510" # temp
      - "\U000F059D" # wind
      - "\U000F059B" # sunset
      - "\U000F059C" # sunrise
      - "\U000F0E02" # Thermo Down
      - "\U000F0E03" # Thermo Up
      - "\U000F050F" # Temp
      - "\U000F04DB" # stop
      - "\U000F040A" # play
      - "\U000F03E4" # pause
      - "\U000F0597" # rainy
      - "\U000F1A09" # mdi-triangle-small-down
      - "\U000F1A0A" # mdi-triangle-small-up
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: font_icons_temp
    size: 50
    glyphs:
      - "\U000F050F" # Temp
  - file: fonts/materialdesignicons-webfont.ttf
    id: font_wifi
    size: 20
    glyphs:
      - "\U000F091F"
      - "\U000F0922"
      - "\U000F0925"
      - "\U000F0928"
      - "\U000F092B"

color:
  - id: COLOR_RED
    red: 100%
    green: 0%
    blue: 0%
    white: 0%
spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14

display:
  - platform: waveshare_epaper
    id: eink_display
    # cs_pin: 15
    # dc_pin: 27
    # busy_pin:
    #   number: 25
    #   inverted: True
    # reset_pin: 26
    # #model: 7.50inbv2
    # #model: 7.50in-bv2-rb

    model: 7.50in-bV3
    update_interval: never
    cs_pin:
      number: GPIO15
      ignore_strapping_warning: true
    dc_pin: GPIO27
    busy_pin:
      number: GPIO25
      inverted: True
    reset_pin: GPIO26
    reset_duration: 2ms
    rotation: 180
    lambda: |-
      int xres = it.get_width();
      int yres = it.get_height();

      auto color_text = Color::WHITE;
      auto color_bg = Color::BLACK;

      auto index = id(appearance).active_index();

      if (index.has_value()) {
        if (index.value() == 1) {
          ESP_LOGD("custom", "Light Mode is selected - using black text on a white background.");
          color_text = Color::BLACK;
          color_bg = Color::WHITE;
        } else {
          ESP_LOGD("custom", "Dark Mode is selected - using white text on a black background.");
        }
      }

      // Fill background.
      it.fill(color_bg);

      if (id(initial_data_received) == false) {
        it.printf(xres/2, yres/2, id(din_big), COLOR_RED, TextAlign::TOP_CENTER, "Waiting for data...");
      } else {

        #define x_pad 10 // border padding
        #define y_pad 10 // border padding

        #define y1 y_pad
        #define y2 ((yres-10)/4 * 1)
        #define y3 ((yres-10)/4 * 2)
        #define y4 ((yres-10)/4 * 3)
        #define val_pad 60 // padding before value
        #define x1 x_pad // x position 1st column name
        #define x2 ((xres/4) * 1) // x position 2nd column name
        #define x3 ((xres/4) * 2) // x position 3rd column name
        #define x4 ((xres/4) * 3) // x position 3rd column name

        int wifi_x_a = xres-x_pad;
        int wifi_y_a = yres-y_pad+2;

        // it.fill(COLOR_OFF);

        it.printf(20, 5, id(din_big), COLOR_RED, id(greeting).state.c_str());
        it.rectangle(2, 2, xres-4, yres-4);

        auto playing = id(media_status).state == "playing";
        auto paused = id(media_status).state == "paused";
        auto mediaIcon = playbackStatusToIcon(playing, paused);
        it.printf(x1, y1+70, id(font_icons), TextAlign::BASELINE_LEFT, mediaIcon.c_str());
        if (playing || paused) {
          it.printf(x1+45, y1+55, id(din_med), TextAlign::BASELINE_LEFT, "%s", id(media_artist).state.c_str());
          it.printf(x1+45, y1+75, id(text_20), TextAlign::BASELINE_LEFT, "%s", id(media_title).state.c_str());
        } else {
          it.printf(x1+45, y1+65, id(text_20), TextAlign::BASELINE_LEFT, "Nothing Playing");
        }

        auto dayTime = id(hasun).state == "above_horizon";
        auto conditionIcon = conditionToIcon(id(condition).state, dayTime);
        it.printf(xres - x_pad, 40, id(font_icons_large), TextAlign::CENTER_RIGHT, conditionIcon.c_str());

        it.print(x1, y2, id(din_med), COLOR_RED, TextAlign::BASELINE_LEFT, "Current Temp");
        it.printf(x1-5, y2+65, id(font_icons_temp), COLOR_RED, TextAlign::BASELINE_LEFT, "\U000F050F");
        it.printf(x1+45, y2+55, id(text_current_temp), COLOR_RED, TextAlign::BASELINE_LEFT, "%.1f°C", id(temperature).state);
        it.print(x2, y2, id(din_med), TextAlign::BASELINE_LEFT, "Temp Today");
        it.printf(x2, y2+40, id(font_icons), TextAlign::BASELINE_LEFT, "\U000F0E03");
        it.printf(x2+45, y2+32, id(text_20), TextAlign::BASELINE_LEFT, "%.1f°C", id(max_temp).state);
        it.printf(x2, y2+80, id(font_icons), TextAlign::BASELINE_LEFT, "\U000F0E02");
        it.printf(x2+45, y2+72, id(text_20), TextAlign::BASELINE_LEFT, "%.1f°C", id(min_temp).state);
        it.print(x3, y2, id(din_med), TextAlign::BASELINE_LEFT, "Heading");
        it.print(x4, y2, id(din_med), TextAlign::BASELINE_LEFT, "Rainfall");
        it.printf(x4, y2+40, id(font_icons), TextAlign::BASELINE_LEFT, "\U000F0597");
        it.printf(x4+45, y2+30, id(text_20), TextAlign::BASELINE_LEFT, "T: %.2fmm", id(rainfall).state);
        it.printf(x4+45, y2+50, id(text_20), TextAlign::BASELINE_LEFT, "W: %.2fmm", id(rainfall_week).state);
        it.printf(x4+45, y2+70, id(text_20), TextAlign::BASELINE_LEFT, "M: %.2fmm", id(rainfall_month).state);
        it.printf(x4+45, y2+90, id(text_20), TextAlign::BASELINE_LEFT, "Y: %.2fmm", id(rainfall_year).state);

        it.print(x1, y3, id(din_med), TextAlign::BASELINE_LEFT, "Heading");
        it.print(x2, y3, id(din_med), TextAlign::BASELINE_LEFT, "Heading");
        it.print(x3, y3, id(din_med), TextAlign::BASELINE_LEFT, "Heading");

        it.print(x4, y3, id(din_med), TextAlign::BASELINE_LEFT, "Forecast");
        it.printf(x4+5, y3+25, id(text_forecast), TextAlign::BASELINE_LEFT, "%s", id(forecast1).state.c_str());
        it.printf(x4+5, y3+50, id(text_forecast), TextAlign::BASELINE_LEFT, "%s", id(forecast2).state.c_str());
        it.printf(x4+5, y3+75, id(text_forecast), TextAlign::BASELINE_LEFT, "%s", id(forecast3).state.c_str());
        it.printf(x4+5, y3+100, id(text_forecast), TextAlign::BASELINE_LEFT, "%s", id(forecast4).state.c_str());
        it.printf(x4+5, y3+125, id(text_forecast), TextAlign::BASELINE_LEFT, "%s", id(forecast5).state.c_str());
        it.printf(x4+5, y3+150, id(text_forecast), TextAlign::BASELINE_LEFT, "%s", id(forecast6).state.c_str());

        it.print(x1, y4, id(din_med), TextAlign::BASELINE_LEFT, "Sun");
        it.printf(x1, y4+40, id(font_icons), TextAlign::BASELINE_LEFT, "\U000F059C");
        it.printf(x1+45, y4+30, id(text_20), TextAlign::BASELINE_LEFT, "%s", id(sunrise).state.c_str());
        it.printf(x1, y4+80, id(font_icons), TextAlign::BASELINE_LEFT, "\U000F059B");
        it.printf(x1+45, y4+70, id(text_20), TextAlign::BASELINE_LEFT, "%s", id(sunset).state.c_str());
        it.print(x2, y4, id(din_med), TextAlign::BASELINE_LEFT, "Moon");
        it.printf(x2, y4+40, id(font_icons), TextAlign::BASELINE_LEFT, "\U000F1A0A");
        it.printf(x2+45, y4+30, id(text_20), TextAlign::BASELINE_LEFT, "%s", id(moon_rise).state.c_str());
        it.printf(x2, y4+80, id(font_icons), TextAlign::BASELINE_LEFT, "\U000F1A09");
        it.printf(x2+45, y4+70, id(text_20), TextAlign::BASELINE_LEFT, "%s", id(moon_set).state.c_str());
        it.print(x3, y4, id(din_med), TextAlign::BASELINE_LEFT, "Heading");
        it.printf(x3, y4 + 40, id(font_icons), TextAlign::BASELINE_LEFT, "\U000F0510");
        it.printf(x3+45, y4+30, id(text_20), TextAlign::BASELINE_LEFT, "%.1f °C", id(max_temp).state);

        // Footer
        it.filled_rectangle(0, yres-30, xres, yres);
        it.strftime(x_pad, yres-y_pad/2, id(text_footer), COLOR_OFF, TextAlign::BASELINE_LEFT, "%A %d %b %Y", id(ntp).now());
        it.strftime(xres/2, yres-y_pad/2, id(text_footer), COLOR_OFF, TextAlign::BASELINE_CENTER, "Last Update %H:%M", id(ntp).now());

        // WiFi Signal Strength
        if (id(sensor_wifi_signal).has_state()) {
          if (id(sensor_wifi_signal).state >= -50) {
            //Excellent
            it.print(wifi_x_a, wifi_y_a, id(font_wifi), COLOR_OFF, TextAlign::BASELINE_RIGHT, "󰤨");
            ESP_LOGI("WiFi", "Excellent");
          } else if (id(sensor_wifi_signal).state >= -60) {
            //Good
            it.print(wifi_x_a, wifi_y_a, id(font_wifi), COLOR_OFF, TextAlign::BASELINE_RIGHT, "󰤥");
            ESP_LOGI("WiFi", "Good");
          } else if (id(sensor_wifi_signal).state >= -67) {
            //Fair
            it.print(wifi_x_a, wifi_y_a, id(font_wifi), COLOR_OFF, TextAlign::BASELINE_RIGHT, "󰤢");
            ESP_LOGI("WiFi", "Fair");
          } else if (id(sensor_wifi_signal).state >= -70) {
            //Weak
            it.print(wifi_x_a, wifi_y_a, id(font_wifi), COLOR_OFF, TextAlign::BASELINE_RIGHT, "󰤟");
            ESP_LOGI("WiFi", "Weak");
          } else {
            //Unlikely working signal
            it.print(wifi_x_a, wifi_y_a, id(font_wifi), COLOR_OFF, TextAlign::BASELINE_RIGHT, "󰤫");
            ESP_LOGI("WiFi", "Unlikely");
          }
        }
      }